* Design
** Principles of design by Dieter Rams
   <https://www.vitsoe.com/rw/about/good-design>

   #+BEGIN_QUOTE
   Back in the late 1970s, Dieter Rams was becoming increasingly concerned by
   the state of the world around him: “An impenetrable confusion of forms,
   colours and noises.”

   Aware that he was a significant contributor to that world, he asked himself
   an important question: is my design good design?

   His answer is expressed in his ten principles for good design.
   #+END_QUOTE

   - Good design is innovative :: The possibilities for innovation are not, by
        any means, exhausted. Technological development is always offering new
        opportunities for innovative design. But innovative design always
        develops in tandem with innovative technology, and can never be an end
        in itself.
   - Good design makes a product useful :: A product is bought to be used. It
        has to satisfy certain criteria, not only functional, but also
        psychological and aesthetic. Good design emphasises the usefulness of a
        product whilst disregarding anything that could possibly detract from
        it.
   - Good design is aesthetic :: The aesthetic quality of a product is integral
        to its usefulness because products we use every day affect our person
        and our well-being. But only well-executed objects can be beautiful.
   - Good design makes a product understandable :: It clarifies the product’s
        structure. Better still, it can make the product talk. At best, it is
        self-explanatory.
   - Good design is unobtrusive :: Products fulfilling a purpose are like tools.
        They are neither decorative objects nor works of art. Their design
        should therefore be both neutral and restrained, to leave room for the
        user’s self-expression.
   - Good design is honest :: It does not make a product more innovative,
        powerful or valuable than it really is. It does not attempt to
        manipulate the consumer with promises that cannot be kept.
   - Good design is long-lasting :: It avoids being fashionable and therefore
        never appears antiquated. Unlike fashionable design, it lasts many years
        – even in today’s throwaway society.
   - Good design is thorough down to the last detail :: Nothing must be
        arbitrary or left to chance. Care and accuracy in the design process
        show respect towards the user.
   - Good design is environmentally-friendly :: Design makes an important
        contribution to the preservation of the environment. It conserves
        resources and minimises physical and visual pollution throughout the
        lifecycle of the product.
   - Good design is as little design as possible :: Less, but better – because
        it concentrates on the essential aspects, and the products are not
        burdened with non-essentials. Back to purity, back to simplicity.
** Laws of UX
   <https://lawsofux.com/>

   A collection of seventeen important things to apply in practice when you're
   doing UX work.

   - Doherty Threshold :: Productivity soars when a computer and its users
        interact at a pace (<400ms) that ensures that neither has to wait on the
        other.
   - Fitts’s Law :: The time to acquire a target is a function of the distance
                    to and size of the target.
   - Hick’s Law :: The time it takes to make a decision increases with the
                   number and complexity of choices.
   - Jakob’s Law :: Users spend most of their time on other sites. This means
                    that users prefer your site to work the same way as all the
                    other sites they already know.
   - Law of Common Region :: Elements tend to be perceived into groups if they
        are sharing an area with a clearly defined boundary.
   - Law of Prägnanz :: People will perceive and interpret ambiguous or complex
        images as the simplest form possible, because it is the interpretation
        that requires the least cognitive effort of us.
   - Law of Proximity :: Objects that are near, or proximate to each other, tend
        to be grouped together.
   - Law of Similarity :: The human eye tends to perceive similar elements in a
        design as a complete picture, shape, or group, even if those elements
        are separated.
   - Law of Uniform Connectedness :: Elements that are visually connected are
        perceived as more related than elements with no connection.
   - Miller’s Law :: The average person can only keep 7 (plus or minus 2) items
                     in their working memory.
   - Occam’s Razor :: Among competing hypotheses that predict equally well, the
                      one with the fewest assumptions should be selected.
   - Pareto Principle :: The Pareto principle states that, for many events,
        roughly 80% of the effects come from 20% of the causes.
   - Parkinson’s Law :: Any task will inflate until all of the available time is
        spent.
   - Serial Position Effect :: Users have a propensity to best remember the
        first and last items in a series.
   - Tesler’s Law :: Tesler's Law, also known as The Law of Conservation of
                     Complexity, states that for any system there is a certain
                     amount of complexity which cannot be reduced.
   - Von Restorff Effect :: The Von Restorff effect, also known as The Isolation
        Effect, predicts that when multiple similar objects are present, the one
        that differs from the rest is most likely to be remembered.
   - Zeigarnik Effect :: People remember uncompleted or interrupted tasks better
        than completed tasks.
** Little UI details by @ux_grant
   <https://mobile.twitter.com/i/moments/880688233641848832>

   A collections of little tips from @steveschoger to improve your visual design
   skills with the little details that make a big difference
** Design tips by @steveschoger
   <https://twitter.com/i/moments/994601867987619840>
** Typography vocabulary by Pablo Stanley
   <https://twitter.com/pablostanley/status/998957556721635328>
* Architecture
** Think outside the database
   <https://twitter.com/steveschoger/status/997125312411570176>

   #+BEGIN_QUOTE
   Don't be afraid to "think outside the database" — your UI doesn't need to map
   one-to-one with your data's fields and values.
   #+END_QUOTE

   See more in [[Design tips by @steveschoger]].
* Editing
** Code editors
   If you've been in programming for long enough, you probably have settled on
   your favorite code editor already. However, if you're just beginning your
   journey, this topic is actually quite important because what you choose as
   your primary code editor will impact your work style.

   Most code editors support plugins and have broad communities that create
   those.

   Here, we take a look at [[Atom]], a code editor created by Github. It's
   definitely not the most popular, but the chance you come across a fellow
   frontend engineer who uses Atom is quite high; other likely alternatives
   would be VS Code and Sublime Text.
*** Atom
    You can get Atom on [[https://atom.io][the official website]].

    Once you get it running, you'll have command line tool available so you'll
    be able to open project folders from terminal:

    #+BEGIN_SRC bash
    cd path/to/project; atom .
    #+END_SRC

    You may also want to install a couple plugins:

    - [[https://atom.io/packages/prettier-atom][prettier-atom]] for [[Prettier]]
    - [[https://atom.io/packages/linter-eslint][linter-esint]] for [[ESLint]]
    - [[https://atom.io/packages/editorconfig][editorconfig]] for [[EditorConfig]]
    - [[https://atom.io/packages/emmet][emmet]] for [[Type HTML faster with Emmet][Emmet]]

    And you may also like to look up Atom keyboard cheat sheets to have a quick
    overview of the most useful hotkeys.
** EditorConfig
* Programming
** HTML
*** The style of HTML code
    Check out [[https://www.w3schools.com/html/html5_syntax.asp][the HTML5 Style Guide and Coding Conventions from W3Schools]]. It
    provides fundamental tips on writing good HTML code.

    Generally, you want to have

    - Lean structure :: HTML defines structure of a document, and because
         there is no limit on number of elements or levels of nesting, it takes
         deliberate effort to maintain lean structure. Remember: the greater the
         number of elements in the document tree, the slower the page runs in
         user's browser!
    - Semantic structure :: Back in days, it took four to six extra
         elements in the document tree to draw rounded corners in a button.
         These days, with all that [[CSS]] has to offer, there is no need to
         overload the HTML with unnecessary elements that don't have semantic
         value, that is, have /meaning for the user/, as opposed to being used
         purely for display or changing flow of the document.
    - Device-agnostic structure :: the HTML document has to be exactly the same
         for all possible devices, with not a single element being hidden or
         removed upon delivery to user's browser. It's then a matter of
         establishing [[CSS Media Queries]] and using [[@supports]] rules to manage the
         representation of HTML on the screen.
*** TODO Type HTML faster with Emmet
** CSS
*** CSS Media Queries
    Check out amazing article on CSS-Tricks, [[https://css-tricks.com/css-media-queries/][CSS Media Queries & Using Available
    Space]], to learn about media queries.
*** @supports
    The ~@supports~ is a rule that checks whether a certain CSS property and
    value are supported in user's browser. For example,

    #+BEGIN_SRC css
    @supports (display: grid) {
      .2x2grid {
        display: grid;
        grid-template: 1fr 1fr / 1fr 1fr;
      }
    }
    #+END_SRC

    Check out an article on CSS Tricks about [[https://css-tricks.com/the-at-rules-of-css/#article-header-id-10][the at-rules of CSS]] that gives a
    brief overview of all the @-rules, including ~@supports~.
*** BEM
    BEM stands for "block, element, modifier". It was invented in 2014 and has
    been gaining popularity since then.

    The core idea is to have flat CSS stylesheet. The "flat" here means that not
    a single CSS selector in the stylesheet exceeds one classname. So it
    transforms this:

    #+BEGIN_SRC scss
    .table {
      // table style
    }

    .table tr {
      // table row style
    }

    .table tr td {
      // table cell style
    }
    #+END_SRC

    into this:

    #+BEGIN_SRC scss
    .table {
      // table style
    }

    .table__row {
      // table row style
    }

    .table__cell {
      // table cell style
    }
    #+END_SRC

    As a result,

    - applying the same class gives the same outcome (a common analogy would be
      the concept of purity in functional programming),
    - no way the same element can be styled differently based on their parents;
      each element has the styles of its own, derived from the classname, and
    - debugging and refactoring becomes linear and easy, the estimated effort
      does not explode as the codebase grows.

    The first entity is "block". The block is defined simply as a class name and
    is given to any DOM element that is meant to be a wrapping element or a
    container of any sort:

    #+BEGIN_SRC html
    <table class="table">
    </table>
    #+END_SRC

    Here, "table" is the block.

    The second entity is "element". It's a DOM node that is a child, but not
    necessarily a direct one, of any block:

    #+BEGIN_SRC html
    <table class="table">
      <tr class="table__row"></tr>
    </table>
    #+END_SRC

    Here, "table__row" is a classname that defines an element. You can see that
    element name is divided from the block name by two underscores. This is a
    classic BEM syntax. You can invent your own syntax, although keep in mind
    that once a newbie is introduced to the codebase you're developing, they may
    know about BEM and be ready to see classic syntax but they may not easily
    grasp your custom syntax or recognize BEM behind it. So be practical!

    Now, the third and the last entity, the "modifier":

    #+BEGIN_SRC html
    <table class="table">
      <tr class="table__row"></tr>
      <tr class="table__row table__row--inactive"></tr>
    </table>
    #+END_SRC

    Here, "table__row table__row--inactive" is a class list of an element "row"
    of block "table" with modifier "inactive". Please note that a modifier isn't
    simply a predicate string (like "disabled" in Bootstrap) but a fully
    constructed class name that consists of the block, element and modifier
    itself. The reason is to avoid collisions and follow the rule that no single
    classname should be, accidentally or intentionally, applied to more than one
    semantically distinct element in the DOM tree. So we trade verbosity for
    lower risk of name collision here. Remember that CSS has one namespace and
    it's global?

    You may also see that modifier is listed along with the element itself. Using
    a modifier classname without its corresponding element classname is
    considered against the BEM convention and therefore shouldn't happen.

    This was just a quick intro. Please invest your time into reading about BEM
    and into learning BEM in practice. It's not complex at all, it's rather small
    and very practical. Take your time to get to know tools around BEM, like the
    bem-cn library (https://www.npmjs.com/package/bem-cn) or a BEM linter for
    PostCSS (https://www.npmjs.com/package/postcss-bem-linter).

    Read more about BEM: https://en.bem.info
*** CSS Blocks
    The [[https://github.com/linkedin/css-blocks][CSS blocks]] library brings BEM-like evolutionary improvement to the CSS.
    Unlike BEM, which is just notation in its essence, CSS Blocks is a build tool
    that requires the CSS written in certain syntax:

    #+BEGIN_SRC css
    :scope {
      opacity: 0.9;
    }

    :scope[state|enabled] {
      opacity: 1;
    }
    #+END_SRC

    becomes

    #+BEGIN_SRC css
    .scopehash {
      opacity: 0.9;
    }

    .scopehashenabled {
      opacity: 1;
    }
    #+END_SRC

    This is an interesting concept that wraps both CSS and HTML around the new
    syntax and build pipeline. Definitely worth investing time to learn.
*** TODO CSS-in-JS
*** Tip: use calc and media queries to clamp values
    <https://fvsch.com/code/css-locks/>

    #+BEGIN_QUOTE
    A CSS lock is a Responsive Web Design technique that lets you transition
    smoothly between two values, depending on the current viewport size, rather
    than jump straight from one value to the other.
    #+END_QUOTE

    The [[https://fvsch.com/code/css-locks/][article]] gives thorough overview of fitting the viewport width-specific
    font size (or any other property) into minimum and maximum boundaries while
    having it growing linearly within those boundarie
** Javascript
*** The style of Javascript code
    We live in amazing times when we finally don't need to argue over the style
    of Javascript, because it can be fully automated! Check out [[Prettier]] and
    [[ESLint]] sections for more details.
**** Prettier
**** ESLint
*** Clean Javascript code
    Check out the repo https://github.com/ryanmcdermott/clean-code-javascript.
*** Static type checking
**** TODO Flow
**** TODO TypeScript
* Engineering
** Source control
*** Git
    Git is the most popular source control system that you most likely have
    already used. But if not, it's arguably one of the most valuable skills.
    Check out [[https://git-scm.com/book/en/v2/Getting-Started-Git-Basics][the official tutorial on Git basics]] to learn how to use it.
*** One feature, one commit, one pull-request
    See [[http://medium.com/ki-labs-engineering/one-feature-branch-one-commit-4393aa0a96cd]["One feature branch, one commit"]] on KI labs Engineering blog.
** Build step
*** TODO Gulp
*** TODO Webpack
*** TODO Rollup
** Browser assets
*** Images
*** Fonts
**** Variable fonts
***** Initial proposal for type variations
      https://variationsguide.typenetwork.com
***** Quick intro to variable fonts by Google                        :ATTACH:
      :PROPERTIES:
      :Attachments: Amstelvar-Alpha-example.png
      :ID:       1A241946-18E5-463E-9520-9F360347C582
      :END:
      https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts/
*** TODO Loading npm dependencies from unpkg
** Browser performance
*** High Performance Browser Networking                                :book:
    <https://hpbn.co/>
** TODO Network security
** TODO WebSocket
* Debugging
** TODO Chrome DevTools
* Infrastructure
** CDN
   All the code on the frontend is considered static because it doesn't require
   any computation on the server side. It just gets delivered as is to the
   browser that requested it, and then it runs there. So a common practice to
   arrange delivery of the frontend code is to put it on CDN. As a frontend
   engineer, you need to have solid understanding of CDN basics and hands-on
   experience with the CDN provider of your choice. Cooperate with SRE or
   DevOps in your team to get to know how to manage assets on the CDN manually
   or in an automated way.
*** TODO AWS S3
*** TODO Azure
** TODO Data storage as a service
*** Firebase
*** Graph.cool
** TODO Serverless
* Auto-testing
** Tip: put tests where sources are
   <https://twitter.com/captainsafia/status/998971250335764480>

   #+BEGIN_QUOTE
   Change your life forever by putting your test files in the same directory as
   your source code files.
   #+END_QUOTE
* Drafting ideas
** Github Gist
   The easiest way to show a piece of code is to post it as a "gist" on [[https://gist.github.com][Github
   Gist]]. One "gist" may contain many different files and is accessible as a git
   repo.

   It's fine for sharing code snippets and drafts but it may not be useful for
   demo purposes. When you want to demo the code right away, consider [[Codepen]].
** TODO Babel REPL
** TODO Node REPL
** Codepen
   Make it a habit to use [[https://codepen.io][Codepen]] to sketch and demo little pieces of UI and
   frontend engineering ideas. Getting to run at full speed with Codepen is on
   its own a skill you need to practice.

   You may still remember [[https://jsfiddle.net][JSFiddle]], too. It has similar set of features, and is
   still online, but it doesn't have the network effect that Codepen has.

   On Codepen, you may use third-party libraries. They are added as scripts (as
   opposed to [[Codesandbox]] where dependencies are treated as NPM modules) and
   therefore appear in global namespace. This is okay for quick and dirty
   prototyping, when idea matters more than further maintainability of the code.
** Codesandbox
   [[https://codesandbox.io][Codesandbox]] is quite similar [[Codepen]]. It offers a "container" with a
   full-blown NPM project. You can't use shell with that but you can download
   the sources. Since it's an NPM project under the hood, you have all the
   tooling you would normally have when making it on your own machine. This
   solves the continuation problem at the expense of steeper learning curve.
   Still, it's very useful to be able to do quick prototyping on Codesandbox and
   show it effortlessly.
* People
** Communication
*** Meetings
**** [#A] "Reaching Peak Meeting Efficiency" by Steven Sinofsky
     https://medium.learningbyshipping.com/reaching-peak-meeting-efficiency-f8e47c93317a

     #+BEGIN_QUOTE
     In the course of building a company the most important tool you have to
     create a culture of shared values is communication and meetings are critical
     to communication.

     When you bring together a team of talented and diverse individuals, the only
     way they will come to operate as a team is by spending time talking,
     listening, and understanding the perspective individuals bring to contribute
     to a larger whole. Unless everyone hired shares the same background and
     experiences, there’s no way a group of people can converge to a
     high-performance team without meeting, sharing, and learning together. No
     amount of ping-pong, email, or shared docs can substitute for meeting.
     #+END_QUOTE

     A solid overview of meeting anti-patterns and ways to fix them. It's a long
     read that's worth putting on repeat and re-read every couple months.
*** Giving feedback
**** [#A] Practical Design Critique
     :PROPERTIES:
     :AUTHOR:   Darrin Henein
     :PERMALINK: https://darrinhenein.com/2017/practical-design-critique
     :END:
     Darrin Henein wrote an amazing essay about giving and receiving feedback on
     design, what is the difference between critique and criticism, and how
     fidelity correlates with quality of feedback. Check it out:
     https://darrinhenein.com/2017/practical-design-critique.

     #+BEGIN_QUOTE
     “I don’t like it.”

     “Can you just make the logo a bit bigger?”

     I think we can all relate to these flavors of feedback. While (possibly)
     oversimplified examples, these embody what is meant by reactive or directive
     feedback (respectively). This feedback can come from many places: an
     emotional response, an adverse reaction to change, or even a misplaced
     attempt to “contribute” to the design process. While in some cases this type
     of feedback might be fair, or even right, they do not fit the accepted
     definition of critique, which we’ll get into next.

     A cautionary note regarding reactive or directive feedback: use your best
     discretion when considering whether or not to incorporate this type of
     feedback back into your work.
     #+END_QUOTE
* Documentation
** Markdown
   Knowing Markdown syntax is essential for modern web engineers. It's on Slack
   and StackOverflow, on Github (including [[Github Gist]]) and Gitlab, on Ghost and
   Gatsby, and knowing its syntax along with semantics makes you a better
   communicator.

   A few links:

   - Learn Markdown from its original reference:
     https://daringfireball.net/projects/markdown/syntax,
   - or from an awesome cheat-sheet:
     https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet.
** Add atomic examples to sequential tutorials
   <https://twitter.com/ryanflorence/status/999427816734113792>

   #+BEGIN_QUOTE
   Docs that act like a giant tutorial aren't as friendly as you might think. I
   want to hop in on a single topic but it assumes I've read all 30 pages of
   documentation before this one.

   Sequential tutorials/guides are great, but you gotta have atomic examples of
   an API too.
   #+END_QUOTE

   [[Codepen]] is a suitable way to get embeddable pieces of code that turn into
   actual UI in reader's browser. Embedding these pieces a reader can play
   around with is a step towards better communication.
* Questions
** TODO Quora
** TODO StackOverflow
** TODO Code Review Stack Exchange
** TODO Codementor
** TODO Open source Slack teams
